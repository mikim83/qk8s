#!/usr/bin/env bash

#Choosing the default gateway interface
INET_INTERFACE=`netstat -rn | head -3 | tail -1 | awk '{print $8}'`
#Install directory by default
INSTALL_DIR="/opt/qk8s"
#Kubernetes version (see https://github.com/kubernetes/kubernetes/releases)
K8S_VERSION="v1.2.3"
K8S_API_PORT="8080"
K8S_DNS_IP="10.0.0.10"
K8S_HOSTNAME=`/sbin/ifconfig $INET_INTERFACE | grep "inet addr" | awk -F: '{print $2}' | awk '{print $1}'`
K8S_CLIENT=kubectl
K8S_MASTER=$3
function command_exists() {
        if [ `which "$1"` ]; then
		echo "INFO - found $1 command"
	else
		if [ "$1" == "docker" ]; then
			echo "INFO - Installing latest Docker Daemon"
			curl -fsSL https://get.docker.com/ | sh
		fi

		if [ "$1" == "kubectl" ]; then
			read -r -p "Kubectl not found. Do want me to install it on $INSTALL_DIR/bin? [Y/n] " response
			case $response in
				[yY][eE][sS]|[yY])
					if [ "$(uname)" == "Darwin" ]; then
						echo "INFO - Downloading kubectl into $INSTALL_DIR/bin/kubectl"
						curl -s -L -o $INSTALL_DIR/bin/kubectl -z $INSTALL_DIR/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/$K8S_VERSION/bin/darwin/amd64/kubectl && chmod 755 $INSTALL_DIR/bin/kubectl
						K8S_CLIENT=$INSTALL_DIR/bin/kubectl
						echo "WARNING - Remember to add $INSTALL_DIR/bin/kubectl to your \$PATH env variable"
					elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
						echo "INFO - Downloading kubectl into $INSTALL_DIR/bin/kubectl"
						curl -s -L -o $INSTALL_DIR/bin/kubectl -z $INSTALL_DIR/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/$K8S_VERSION/bin/linux/amd64/kubectl && chmod 755 $INSTALL_DIR/bin/kubectl
						K8S_CLIENT=$INSTALL_DIR/bin/kubectl
						echo "WARNING - Remember to add $INSTALL_DIR/bin/kubectl to your \$PATH env variable"
					fi
					;;
				*)
					echo "ERROR - $1 is required but is not installed. Aborting."
					exit 2
				        ;;
			esac
		else
			echo "ERROR - $1 is required but is not installed. Aborting."
			exit 2
		fi
	fi
}

function prepare_docker {

	echo "INFO - Stoping Docker Daemon"
	service docker stop
	source /run/flannel/subnet.env
	ifconfig docker0 ${FLANNEL_SUBNET}
	if [ -f /lib/systemd/system/docker.service ]; then
		echo "INFO - Patching docker.service systemd file"
		patch -p0 -b /lib/systemd/system/docker.service patch/docker.service.patch
		systemctl daemon-reload
	fi
	echo "INFO - Starting Docker Daemon"
	service docker start
}

function check_system {
	echo "INFO - Checking system requirements"
	if [ $K8S_CLIENT cluster-info 2> /dev/null ]; then
        	echo "ERROR - kubectl is already configured to use an existing cluster"
	        exit 2
    	fi
	command_exists docker

	echo "INFO - Creating dirs"
	mkdir -p $INSTALL_DIR/{bin,etc/kubernetes/manifests,logs,run,kubelet,certs}

	command_exists kubectl
	echo "INFO - Installing Flanneld overlay network daemon"
	curl -s -L -o /tmp/flannel-0.5.5-linux-amd64.tar.gz https://github.com/coreos/flannel/releases/download/v0.5.5/flannel-0.5.5-linux-amd64.tar.gz ; tar -xzf /tmp/flannel-0.5.5-linux-amd64.tar.gz -C /tmp ; cp /tmp/flannel-0.5.5/flanneld ${INSTALL_DIR}/bin/ ; rm -rf /tmp/flannel-0.5.5*

}

function download_kubelet {
	echo "INFO - Downloading kubelet binary version $K8S_VERSION"
	curl -s -L -o ${INSTALL_DIR}/bin/kubelet -z ${INSTALL_DIR}/bin/kubelet https://storage.googleapis.com/kubernetes-release/release/${K8S_VERSION}/bin/linux/amd64/kubelet && chmod 755 ${INSTALL_DIR}/bin/kubelet
}

function copy_kubelet_manifests_master {
	echo "INFO - Copying basic master kubernetes manifests"
	for file in `ls ./manifests/master` ; do
		cat ./manifests/master/$file | \
		sed "s|\${K8S_VERSION}|${K8S_VERSION}|g" | \
		sed "s|\${K8S_HOSTNAME}|${K8S_HOSTNAME}|g" | \
		sed "s|\${INSTALL_DIR}|${INSTALL_DIR}|g" > ${INSTALL_DIR}/etc/kubernetes/manifests/$file
	done
}
function copy_kubelet_manifests_slave {
	echo "INFO - Copying basic slave kubernetes manifests"
	for file in `ls ./manifests/slave` ; do
		cat ./manifests/slave/$file | \
		sed "s|\${K8S_VERSION}|${K8S_VERSION}|g" | \
		sed "s|\${K8S_HOSTNAME}|${K8S_HOSTNAME}|g" | \
		sed "s|\${INSTALL_DIR}|${INSTALL_DIR}|g" | \
		sed "s|\${K8S_MASTER}|${K8S_MASTER}|g" > ${INSTALL_DIR}/etc/kubernetes/manifests/$file
	done
	kubectl config view > ${INSTALL_DIR}/etc/kubernetes/worker-kubeconfig.yaml
}

function create_k8s_system_namespace {

    $K8S_CLIENT create -f - << EOF > /dev/null 2>&1
kind: Namespace
apiVersion: v1
metadata:
  name: kube-system
  labels:
    name: kube-system
EOF
}

function config_flannel_master {

curl -X PUT -d "value={\"Network\":\"10.0.0.0/16\",\"Backend\":{\"Type\":\"vxlan\"}}" "http://${K8S_HOSTNAME}:4001/v2/keys/flannel/network/config"

}

function start_kubelet_master {
	echo "INFO - Starting master kubelet:$K8S_VERSION"

	$INSTALL_DIR/bin/kubelet \
        	--hostname-override=${K8S_HOSTNAME} \
		--address="0.0.0.0"  \
		--register-node=true \
		--api-servers=http://$K8S_HOSTNAME:${K8S_API_PORT} \
		--config=$INSTALL_DIR/etc/kubernetes/manifests \
		--cluster-dns=${K8S_DNS_IP} \
		--cluster-domain=cluster.local \
		--allow-privileged=true --v=2 \
		--root-dir="$INSTALL_DIR/kubelet" \
		--log-dir="$INSTALL_DIR/logs/" > $INSTALL_DIR/logs/kubelet.log 2>&1 &
	sleep 1
	pidof kubelet > $INSTALL_DIR/run/kubelet.pid
}
function start_kubelet_slave {
	echo "INFO - Starting slave kubelet:$K8S_VERSION"
	$INSTALL_DIR/bin/kubelet \
		--api_servers=http://${K8S_MASTER}:${K8S_API_PORT} \
		--register-node=true \
		--hostname-override=${K8S_HOSTNAME} \
		--config=$INSTALL_DIR/etc/kubernetes/manifests \
		--cluster-dns=${K8S_DNS_IP} \
		--cluster-domain=cluster.local \
		--allow-privileged=true --v=2 \
		--root-dir="$INSTALL_DIR/kubelet" \
		--log-dir="$INSTALL_DIR/logs/" > $INSTALL_DIR/logs/kubelet.log 2>&1 &
	sleep 1
	pidof kubelet > $INSTALL_DIR/run/kubelet.pid
}

function start_flannel_master {
	echo "INFO - Starting Flannel Daemon"
	${INSTALL_DIR}/bin/flanneld \
	-etcd-endpoints="http://${K8S_HOSTNAME}:4001" \
	-etcd-prefix="/flannel/network" \
	-ip-masq=true > $INSTALL_DIR/logs/flanneld.log 2>&1 &
	sleep 1
	pidof flanneld > $INSTALL_DIR/run/flanneld.pid
}

function start_flannel_slave {
	echo "INFO - Starting Flannel Daemon"
	${INSTALL_DIR}/bin/flanneld \
	-etcd-endpoints="http://${K8S_MASTER}:4001" \
	-etcd-prefix="/flannel/network"  > $INSTALL_DIR/logs/flanneld.log 2>&1 &
	sleep 1
	pidof flanneld > $INSTALL_DIR/run/flanneld.pid
}

function config_kubectl_master {

	$K8S_CLIENT config set-cluster qk8s-insecure --server=http://${K8S_HOSTNAME}:8080
	$K8S_CLIENT config set-context qk8s-insecure --cluster=qk8s-insecure

	$K8S_CLIENT config set-cluster qk8s --server=https://${K8S_HOSTNAME} --certificate-authority=$INSTALL_DIR/certs/ca.crt
	$K8S_CLIENT config set-credentials qk8s --certificate-authority=$INSTALL_DIR/certs/ca.crt --client-key=$INSTALL_DIR/certs/kubecfg.key --client-certificate=$INSTALL_DIR/certs/kubecfg.crt
	$K8S_CLIENT config set-context qk8s --cluster=qk8s --user=qk8s

	$K8S_CLIENT config use-context qk8s-insecure

}
function config_kubectl_slave {

	$K8S_CLIENT config set-cluster qk8s-insecure --server=http://${K8S_MASTER}:8080
	$K8S_CLIENT config set-context qk8s-insecure --cluster=qk8s-insecure

	#$K8S_CLIENT config set-cluster qk8s --server=https://${K8S_MASTER} --certificate-authority=$INSTALL_DIR/certs/ca.crt
	#$K8S_CLIENT config set-credentials qk8s --certificate-authority=$INSTALL_DIR/certs/ca.crt --client-key=$INSTALL_DIR/certs/kubecfg.key --client-certificate=$INSTALL_DIR/certs/kubecfg.crt
	#$K8S_CLIENT config set-context qk8s --cluster=qk8s --user=qk8s

	$K8S_CLIENT config use-context qk8s-insecure

}

function stop_kubelet {
	if [ -f $INSTALL_DIR/run/kubelet.pid ];then
		echo "INFO - Killing kubelet"
		kill -9 `cat $INSTALL_DIR/run/kubelet.pid`
		rm $INSTALL_DIR/run/kubelet.pid
	else
		echo "WARNING - kubelet PID file not found. Performing a killall. Hold on your pants"
		killall -9 kubelet
	fi
}
function stop_flannel {
	if [ -f $INSTALL_DIR/run/flanneld.pid ];then
		echo "INFO - Killing flannel"
		kill -9 `cat $INSTALL_DIR/run/flanneld.pid`
		rm $INSTALL_DIR/run/flanneld.pid
	else
		echo "WARNING - flanneld PID file not found. Performing a killall. Hold on your pants"
		killall -9 flanneld
	fi
}
function stop_k8s_containers {

	k8s_containers=$(docker ps -aqf "name=k8s_")
	echo "INFO - Stopping k8s_ containers"
	if [ ! -z "$k8s_containers" ]; then
		docker stop $k8s_containers > /dev/null 2>&1
		docker wait $k8s_containers > /dev/null 2>&1
		docker rm -fv $k8s_containers > /dev/null 2>&1
	fi

}

function start_kubernetes_master {
	check_system
	download_kubelet
	copy_kubelet_manifests_master
	start_flannel_master
	prepare_docker
	start_kubelet_master
	config_kubectl_master
	wait_for_kubernetes
	config_flannel_master
	create_k8s_system_namespace
	echo "INFO - Started master kubernetes version $K8S_VERSION"
	$K8S_CLIENT cluster-info
        $K8S_CLIENT config use-context qk8s
}

function start_kubernetes_slave {
	check_system
	download_kubelet
	config_kubectl_slave
	copy_kubelet_manifests_slave
	start_flannel_slave
	prepare_docker
	start_kubelet_slave
	start_flannel_slave
	wait_for_kubernetes
	echo "INFO - Started slave kubernetes version $K8S_VERSION"
	$K8S_CLIENT cluster-info
        #$K8S_CLIENT config use-context qk8s
}

function stop_kubernetes {
	stop_kubelet
	stop_flannel
	stop_k8s_containers
}

function delete_kubelet {
	echo "INFO - Deleting kubelet binary"
	rm -rf $INSTALL_DIR/bin/kubelet
}

function umount_tokens {
	echo "INFO - Umounting tokens fs"
	for fs in `mount | grep "$INSTALL_DIR/kubelet/pods/" | awk '{print $3}'`; do
		umount $fs
	done
}

function delete_files {
	echo "INFO - Deleting POD files, logs, etc..."
	rm -rf $INSTALL_DIR/etc
	rm -rf $INSTALL_DIR/logs
	rm -rf $INSTALL_DIR/run
	rm -rf $INSTALL_DIR/kubelet
}

function restore_docker {
	if [ -f /lib/systemd/system/docker.service.orig ]; then
		echo "INFO - Restoring docker"
		mv /lib/systemd/system/docker.service.orig /lib/systemd/system/docker.service
		systemctl daemon-reload
		service docker restart
	fi
}

function delete_kubernetes {
	stop_kubelet
	stop_flannel
	stop_k8s_containers
	umount_tokens
	delete_kubelet
	delete_files
	restore_docker
	echo "INFO - Kubernetes cluster deleted"
}

function addon_kubernetes {
	check_system
	$K8S_CLIENT create -f addons
	$K8S_CLIENT cluster-info
}

function wait_for_kubernetes {
	echo "INFO - Waiting for kubernetes to become ready"
	until $($K8S_CLIENT cluster-info &> /dev/null); do
		sleep 1
	done
}

function print_usage {
    cat << EOF
qk8s is a utility for Quickly launching Kubernetes Multinode Cluster in linux machines

Usage: qk8s [command]

Available commands:
  start	[master|slave] [master ip]	Quickly Starts Kubernetes in the Docker host. Master or Slave + Master ip is mandatory.
  stop					Stop Kubernetes cluster
  delete				Deletes and stops all Kubernetes cluster objects and containers
  addon					Creates addons from addon directory (DNS-addon, etc..)
  restart				Restart Kubernetes
EOF
}


if [ "$1" == "start" ]; then
	if [ "$2" == "master" ]; then
		start_kubernetes_master
	elif [ "$2" == "slave" ]; then
		if [[ ${K8S_MASTER} =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]];then
			start_kubernetes_slave
		else
			echo "ERROR - Bad Master Ip Address"
			print_usage
		fi
	else
		echo "ERROR - Missing argument"
		print_usage
	fi
elif [ "$1" == "stop" ]; then
	stop_kubernetes
elif [ "$1" == "delete" ]; then
	delete_kubernetes
elif [ "$1" == "restart" ]; then
	qk8s down && qk8s up
elif [ "$1" == "addon" ]; then
	addon_kubernetes
else
	print_usage
fi
