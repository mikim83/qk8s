#!/bin/bash -xe

INET_INTERFACE="eth0"
INSTALL_DIR="/opt"
K8S_VERSION="v1.2.2"
K8S_API_PORT="8080"
K8S_DNS_IP="10.0.0.10"
K8S_HOSTNAME=`/sbin/ifconfig $INET_INTERFACE | grep "inet addr" | awk -F: '{print $2}' | awk '{print $1}'`


function command_exists() {
        command -v "$1" >/dev/null 2>&1 || \
	    { echo "ERROR - $1 is required but is not installed. Aborting." >&2; exit 2; }
}

function check_system {

	if [ kubectl cluster-info 2> /dev/null ]; then
        	echo "ERROR - kubectl is already configured to use an existing cluster"
	        exit 2
    	fi
	#Checking if docker command exists
	command_exists docker
	command_exists kubectl

	#Creating install directories
	mkdir -p $INSTALL_DIR/{bin,etc/kubernetes/manifests,logs}
}

function download_kubelet {
	curl -L -o $INSTALL_DIR/bin/kubelet -z $INSTALL_DIR/bin/kubelet https://storage.googleapis.com/kubernetes-release/release/$K8S_VERSION/bin/linux/amd64/kubelet && chmod 755 $INSTALL_DIR/bin/kubelet
}

function copy_kubelet_manifests {
	cp -Rpf ./manifests/* $INSTALL_DIR/etc/kubernetes/manifests/
}

function create_k8s_system_namespace {
    kubectl create -f - << EOF > /dev/null
kind: Namespace
apiVersion: v1
metadata:
  name: kube-system
  labels:
    name: kube-system
EOF
}

function start_kubelet {
	$INSTALL_DIR/bin/kubelet \
        	--hostname-override=${K8S_HOSTNAME} \
		--address="0.0.0.0"  \
		--register-node=true \
		--api-servers=http://localhost:${K8S_API_PORT} \
		--config=$INSTALL_DIR/etc/kubernetes/manifests \
		--cluster-dns=${K8S_DNS_IP} \
		--cluster-domain=cluster.local \
		--allow-privileged=true --v=2 > $INSTALL_DIR/logs/kubelet.log 2>&1 &
}

function start_kubernetes {
	check_system
	download_kubelet
	copy_kubelet_manifests
	start_kubelet
	create_k8s_system_namespace
}

function addon_kubernetes {
	kubectl add -f addons

}

function print_usage {
    cat << EOF
kid is a utility for Quickly launching Kubernetes in Docker

Usage: qk8s [command]

Available commands:
  up       Quickly Starts Kubernetes in the Docker host currently configured with your local docker command
  down     Stop Kubernetes cluster
  delete   Deletes and stops all Kubernetes cluster objects and containers
  addon	   Creates addons from addon directory (DNS-addon, etc..)
  restart  Restart Kubernetes
EOF
}


if [ "$1" == "up" ]; then
	start_kubernetes
elif [ "$1" == "down" ]; then
	#TODO
	stop_kubernetes
elif [ "$1" == "delete" ]; then
	#TODO
	delete_kubernetes
elif [ "$1" == "restart" ]; then
	#TODO
	qk8s down && qk8s up
elif [ "$1" == "addon" ]; then
	#TODO
	addon_kubernetes
else
	print_usage
fi
