#!/bin/bash -xe

INET_INTERFACE="eth0"
INSTALL_DIR="/opt"
K8S_VERSION="v1.2.2"
K8S_API_PORT="8080"
K8S_DNS_IP="10.0.0.10"
K8S_HOSTNAME=`/sbin/ifconfig $INET_INTERFACE | grep "inet addr" | awk -F: '{print $2}' | awk '{print $1}'`


function command_exists() {
        command -v "$1" >/dev/null 2>&1 || \
	    { echo "ERROR - $1 is required but is not installed. Aborting." >&2; exit 2; }
}

function check_system {

	#Abort installation if .kube directory exists on the home user in order to not affect other configurations
	if [ -d "~/.kube" ]; then
		echo "ERROR - .kube directory exists on user home. Aborting"
		exit 2 
	fi

	#Checking if docker command exists
	command_exists docker
	
	#Creating install directories
	mkdir -p $INSTALL_DIR/{bin,etc/manifests,logs}
}

function download_kubelet {
	curl -L -o $INSTALL_DIR/bin/kubelet -z $INSTALL_DIR/bin/kubelet https://storage.googleapis.com/kubernetes-release/release/$K8S_VERSION/bin/linux/amd64/kubelet && chmod 755 $INSTALL_DIR/bin/kubelet
}

function start_kubelet {
	$INSTALL_DIR/bin/kubelet \
        	--hostname-override=${K8S_HOSTNAME} \
		--address="0.0.0.0"  \
		--register-node=true \
		--api-servers=http://localhost:${K8S_API_PORT} \
		--config=/etc/kubernetes/manifests \
		--cluster-dns=${K8S_DNS_IP} \
		--cluster-domain=cluster.local \
		--allow-privileged=true --v=2
}

function start_kubernetes {
	check_system
	download_kubelet
	start_kubelet
}


function print_usage {
    cat << EOF
kid is a utility for Quickly launching Kubernetes in Docker

Usage: qk8s [command]

Available commands:
  up       Quickly Starts Kubernetes in the Docker host currently configured with your local docker command
  down     Tear down a previously started Kubernetes cluster
  restart  Restart Kubernetes
EOF
}


if [ "$1" == "up" ]; then
	start_kubernetes
elif [ "$1" == "down" ]; then
	stop_kubernetes
elif [ "$1" == "restart" ]; then
	qk8s down && qk8s up
else
	print_usage
fi
